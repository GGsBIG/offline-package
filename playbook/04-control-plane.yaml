---
- name: Install and configure Kubernetes control plane
  hosts: masters
  become: true
  vars:
    offline_dest_dir: /opt/offline-package
    package_dir: "{{ offline_dest_dir }}/k8s-package"
    kubernetes_server_archive: "{{ package_dir }}/kubernetes-server-linux-amd64.tar.gz"
    kubernetes_version: "v1.33.2"
    cluster_name: offline-k8s
    image_repository: registry.k8s.io
    pod_subnet: 10.244.0.0/16
    service_subnet: 10.96.0.0/16
    dns_domain: cluster.local
    control_plane_ip: "{{ hostvars[inventory_hostname].ansible_host }}"
    control_plane_hostname: "{{ inventory_hostname }}"
    control_plane_endpoint: "{{ control_plane_ip }}:6443"
    kubeconfig_path: /etc/kubernetes/admin.conf
  tasks:
    - name: Ensure Kubernetes server archive exists
      ansible.builtin.stat:
        path: "{{ kubernetes_server_archive }}"
      register: server_archive

    - name: Fail if Kubernetes server archive is missing
      ansible.builtin.fail:
        msg: "Kubernetes server archive not found at {{ kubernetes_server_archive }}. Run 01-prepare-packages first."
      when: not server_archive.stat.exists

    - name: Extract Kubernetes server package
      ansible.builtin.unarchive:
        src: "{{ kubernetes_server_archive }}"
        dest: "{{ package_dir }}"
        remote_src: true
        creates: "{{ package_dir }}/kubernetes/server/bin/kubeadm"

    - name: Install Kubernetes control plane binaries
      ansible.builtin.copy:
        src: "{{ package_dir }}/kubernetes/server/bin/{{ item }}"
        dest: "/usr/bin/{{ item }}"
        mode: "0755"
        remote_src: true
      loop:
        - kubeadm
        - kubelet
        - kubectl

    - name: Install kubelet systemd unit
      ansible.builtin.template:
        src: kubelet.service.j2
        dest: /etc/systemd/system/kubelet.service
        mode: "0644"

    - name: Ensure kubelet drop-in directory exists
      ansible.builtin.file:
        path: /etc/systemd/system/kubelet.service.d
        state: directory
        mode: "0755"

    - name: Install kubelet kubeadm drop-in
      ansible.builtin.template:
        src: 10-kubeadm.conf.j2
        dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        mode: "0644"

    - name: Enable kubelet service
      ansible.builtin.systemd:
        name: kubelet
        enabled: true
        daemon_reload: true
        state: restarted

    - name: Render kubeadm configuration
      ansible.builtin.template:
        src: cluster-config.yaml.j2
        dest: "{{ offline_dest_dir }}/cluster-config.yaml"
        mode: "0644"
      vars:
        kubernetes_version: "{{ kubernetes_version }}"
        cluster_name: "{{ cluster_name }}"
        image_repository: "{{ image_repository }}"
        pod_subnet: "{{ pod_subnet }}"
        service_subnet: "{{ service_subnet }}"
        dns_domain: "{{ dns_domain }}"
        control_plane_ip: "{{ control_plane_ip }}"
        control_plane_hostname: "{{ control_plane_hostname }}"
        control_plane_endpoint: "{{ control_plane_endpoint }}"

    - name: Initialize control plane with kubeadm
      ansible.builtin.command: >-
        kubeadm init --config {{ offline_dest_dir }}/cluster-config.yaml --upload-certs
      args:
        creates: "{{ kubeconfig_path }}"
      register: kubeadm_init

    - name: Ensure kubeconfig directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: "0750"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"

    - name: Copy admin kubeconfig for {{ ansible_user }}
      ansible.builtin.command: >-
        install -m 0644 {{ kubeconfig_path }} {{ ansible_env.HOME }}/.kube/config
      environment:
        HOME: "{{ ansible_env.HOME }}"
      changed_when: true

    - name: Ensure kubeconfig ownership
      ansible.builtin.command: >-
        chown {{ ansible_user_id }}:{{ ansible_user_gid }} {{ ansible_env.HOME }}/.kube/config
      when: ansible_user_id is defined and ansible_user_gid is defined
      changed_when: true

    - name: Install Calico networking
      ansible.builtin.command: >-
        kubectl apply -f {{ package_dir }}/calico.yaml
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    - name: Install metrics-server components
      ansible.builtin.command: >-
        kubectl apply -f {{ package_dir }}/components.yaml
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true
